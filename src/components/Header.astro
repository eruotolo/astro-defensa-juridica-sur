---
import { Mail, Phone } from "@lucide/astro";
import { Image } from "astro:assets";
import logoHeader from "../assets/images/logo-bk.svg";

// Interfaces TypeScript
interface NavigationItem {
    href: string;
    label: string;
    active?: boolean;
}

interface ContactInfo {
    email: string;
    phone: string;
}

interface Props {
    navigationItems?: NavigationItem[];
    logo?: ImageMetadata;
    contactInfo?: ContactInfo;
}

const {
    navigationItems = [
        { href: "#inicio", label: "Inicio" },
        { href: "#nosotros", label: "Nosotros" },
        { href: "#servicios", label: "Servicios" },
        { href: "#equipo", label: "Equipo" },
        { href: "#contacto", label: "Contacto" },
    ],
    logo = logoHeader,
    contactInfo = {
        email: "juridicasurdefensa@gmail.com",
        phone: "+56958835620",
    },
} = Astro.props;
---

<header class="header-juridico">
    <div class="topbar z-50 hidden md:block">
        <div class="container mx-auto">
            <div class="topbar-content">
                <ul class="contact-info">
                    <li class="contact-item">
                        <Mail size={14} class="contact-icon" />
                        <a href={`mailto:${contactInfo.email}`} class="contact-link">
                            {contactInfo.email}
                        </a>
                    </li>
                    <li class="contact-item">
                        <Phone size={14} class="contact-icon" />
                        <a href={`tel:${contactInfo.phone}`} class="contact-link">
                            {contactInfo.phone}
                        </a>
                    </li>
                </ul>
            </div>
        </div>
    </div>

    <nav id="mainNav" class="nav-sticky">
        <div class="container mx-auto">
            <div class="nav-content">
                <a href="/" class="nav-brand">
                    <Image
                        src={logo}
                        alt="Logo Defensa Jurídica Sur - Abogados Puerto Montt"
                        class="nav-logo"
                        loading="eager"
                        fetchpriority="high"
                    />
                </a>

                <!-- Desktop Menu -->
                <ul class="nav-menu-desktop">
                    {
                        navigationItems.map((item) => (
                            <li class="nav-item">
                                <a href={item.href} class="nav-link" data-nav-link>
                                    {item.label}
                                </a>
                            </li>
                        ))
                    }
                </ul>

                <!-- Mobile Toggle -->
                <button
                    id="sidebarToggle"
                    class="nav-toggle"
                    type="button"
                    aria-label="Abrir menú de navegación"
                    aria-expanded="false"
                    aria-controls="mainSidebar"
                >
                    <svg
                        class="nav-toggle-icon"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                    >
                        <line x1="3" y1="12" x2="21" y2="12"></line>
                        <line x1="3" y1="6" x2="21" y2="6"></line>
                        <line x1="3" y1="18" x2="21" y2="18"></line>
                    </svg>
                </button>
            </div>
        </div>
    </nav>

    <!-- Mobile Sidebar -->
    <aside id="mainSidebar" class="nav-sidebar" aria-label="Menú de navegación móvil">
        <div class="sidebar-content">
            <div class="sidebar-header">
                <button
                    id="sidebarClose"
                    class="sidebar-close"
                    type="button"
                    aria-label="Cerrar menú"
                >
                    <svg
                        class="sidebar-close-icon"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                    >
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>

            <nav class="sidebar-nav">
                <a href="/" class="nav-brand mb-[40px]">
                    <Image src={logo} alt="Logo Defensa Jurídica Sur - Abogados Puerto Montt" class="nav-logo" loading="lazy" />
                </a>
                <ul class="sidebar-menu">
                    {
                        navigationItems.map((item) => (
                            <li class="sidebar-item">
                                <a href={item.href} class="sidebar-link" data-nav-link>
                                    {item.label}
                                </a>
                            </li>
                        ))
                    }
                </ul>
            </nav>
        </div>
    </aside>

    <!-- Overlay -->
    <div id="sidebarOverlay" class="sidebar-overlay" aria-hidden="true"></div>
</header>

<script>
    const topbar = document.querySelector(".topbar") as HTMLElement | null;
    const navbar = document.getElementById("mainNav") as HTMLElement | null;

    if (navbar && topbar) {
        const topbarHeight = topbar.offsetHeight;

        // Evita el salto cuando el nav se vuelve fixed
        const spacer = document.createElement("div");
        spacer.style.height = `${navbar.offsetHeight}px`;
        spacer.style.display = "none";
        navbar.parentElement?.insertBefore(spacer, navbar.nextSibling);

        const onScroll = () => {
            const sticky = window.scrollY > topbarHeight;

            // Usar clase CSS personalizada para manejar estados sticky
            navbar.classList.toggle("nav-scrolled", sticky);

            spacer.style.display = sticky ? "block" : "none";
        };

        window.addEventListener("scroll", onScroll, { passive: true });
        onScroll(); // Ejecuta una vez al cargar
    }
</script>

<script is:inline>
    document.addEventListener("DOMContentLoaded", function () {
        const sidebar = document.getElementById("mainSidebar");
        const overlay = document.getElementById("sidebarOverlay");
        const toggleButton = document.getElementById("sidebarToggle");
        const closeButton = document.getElementById("sidebarClose");
        const sidebarLinks = document.querySelectorAll(".sidebar-link");

        let isOpen = false;

        const toggleMenu = () => {
            isOpen = !isOpen;

            sidebar?.classList.toggle("sidebar-open", isOpen);
            overlay?.classList.toggle("overlay-visible", isOpen);

            toggleButton?.setAttribute("aria-expanded", isOpen.toString());
            sidebar?.setAttribute("aria-hidden", (!isOpen).toString());

            document.body.style.overflow = isOpen ? "hidden" : "";

            if (isOpen) closeButton?.focus();
            else toggleButton?.focus();
        };

        toggleButton?.addEventListener("click", toggleMenu);
        closeButton?.addEventListener("click", toggleMenu);
        overlay?.addEventListener("click", toggleMenu);

        sidebarLinks.forEach((link) => {
            link.addEventListener("click", toggleMenu);
        });

        document.addEventListener("keydown", (e) => {
            if (e.key === "Escape" && isOpen) toggleMenu();
        });

        window.addEventListener("resize", () => {
            if (window.innerWidth >= 1024 && isOpen) toggleMenu();
        });
    });
</script>

<script>
    // Scroll Spy: Activa el enlace del menú según la sección visible
    document.addEventListener("DOMContentLoaded", () => {
        // Buscar tanto sections como divs con id
        const sections = document.querySelectorAll("section[id], div[id]");
        const navLinks = document.querySelectorAll("[data-nav-link]");

        if (sections.length === 0 || navLinks.length === 0) return;

        // Función para activar un enlace específico
        const setActiveLink = (sectionId: string) => {
            // Remover todas las clases active
            navLinks.forEach((link) => {
                link.classList.remove("nav-link-active", "sidebar-link-active");
            });

            // Agregar clase active al enlace correspondiente
            navLinks.forEach((link) => {
                const href = link.getAttribute("href");
                if (href === `#${sectionId}`) {
                    if (link.classList.contains("nav-link")) {
                        link.classList.add("nav-link-active");
                    } else if (link.classList.contains("sidebar-link")) {
                        link.classList.add("sidebar-link-active");
                    }
                }
            });
        };

        // Activar enlace al hacer clic
        navLinks.forEach((link) => {
            link.addEventListener("click", () => {
                const href = link.getAttribute("href");
                if (href && href.startsWith("#")) {
                    const sectionId = href.substring(1);
                    setActiveLink(sectionId);
                }
            });
        });

        // Scroll Spy con IntersectionObserver
        const observerOptions = {
            root: null,
            rootMargin: "-10% 0px -70% 0px",
            threshold: 0.1,
        };

        let currentActiveId = "";

        const observer = new IntersectionObserver((entries) => {
            entries.forEach((entry) => {
                if (entry.isIntersecting) {
                    const sectionId = entry.target.id;

                    // Evitar re-renderizados innecesarios
                    if (currentActiveId === sectionId) return;
                    currentActiveId = sectionId;

                    setActiveLink(sectionId);
                }
            });
        }, observerOptions);

        // Observar todas las secciones
        sections.forEach((section) => observer.observe(section));

        // Activar el primer enlace al cargar la página
        if (sections.length > 0) {
            const firstSectionId = sections[0].id;
            if (firstSectionId) {
                setActiveLink(firstSectionId);
            }
        }
    });
</script>
