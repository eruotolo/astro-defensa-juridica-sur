---
import { Image } from "astro:assets";

import avatarUno from "../assets/avtar-1.jpg";
import avantarDos from "../assets/avtar-2.jpg";

interface TestimonialsInterface {
    avatar: any;
    testimonial: string;
    author: string;
}
const testimonials: TestimonialsInterface[] = [
    {
        avatar: avatarUno,
        testimonial:
            "Awesome and amazing work. Very well organized PSD files with high quality design. Keep creating and providing such quality stuff - Thank you very much!",
        author: "Cliente Uno",
    },
    {
        avatar: avantarDos,
        testimonial:
            "Awesome and amazing work. Very well organized PSD files with high quality design. Keep creating and providing such quality stuff - Thank you very much!",
        author: "Cliente Dos",
    },
];
---

<div class="container mx-auto">
    <div class="flex flex-col justify-center items-center">
        <h1 class="tituloH1Alternative" data-aos="fade-down" data-aos-duration="800">
            Success Stories
        </h1>
    </div>

    <div class="mt-[35px] relative max-w-4xl mx-auto" data-aos="fade-up" data-aos-duration="1000">
        <div id="testimonials-container" class="overflow-hidden">
            {
                testimonials.map((testimonial, index) => (
                    <div
                        class={`testimonial-slide ${index === 0 ? "opacity-100" : "opacity-0 absolute top-0 left-0 w-full"} transition-opacity duration-500`}
                        data-index={index}
                    >
                        <div class="p-8 text-center mx-8">
                            <div class="mb-6">
                                <Image
                                    src={testimonial.avatar}
                                    alt={`Avatar de ${testimonial.author}`}
                                    class="w-20 h-20 rounded-full mx-auto object-cover"
                                    width={80}
                                    height={80}
                                />
                            </div>
                            <blockquote class="parrafo italic mb-6 text-blanco">
                                "{testimonial.testimonial}"
                            </blockquote>
                            <cite class="tituloH4 text-blanco">- {testimonial.author}</cite>
                        </div>
                    </div>
                ))
            }
        </div>

        <div class="flex justify-center space-x-2 mt-6">
            {
                testimonials.map((_, index) => (
                    <button
                        class={`indicator w-3 h-3 rounded-full transition-colors duration-300 ${index === 0 ? "bg-primary" : "bg-gray-300"}`}
                        data-index={index}
                    />
                ))
            }
        </div>
    </div>
</div>

<script>
    import { animate } from "motion";

    // Esperar a que el DOM esté completamente cargado
    document.addEventListener('DOMContentLoaded', function() {
        // Verificar que los elementos existan antes de usarlos
        const slides = document.querySelectorAll(".testimonial-slide");
        const indicators = document.querySelectorAll(".indicator");
        
        // Si no hay slides, salir
        if (slides.length === 0 || indicators.length === 0) {
            console.warn("No se encontraron slides o indicadores para el testimonial slider");
            return;
        }

        const totalSlides = slides.length;
        let currentIndex = 0;
        let autoRotate: ReturnType<typeof setInterval>;

        function showSlide(index: number) {
            // Validar que el índice sea válido
            if (index < 0 || index >= totalSlides) return;
            
            // Ocultar slide actual
            animate(slides[currentIndex], { opacity: 0 }, { duration: 0.3 });

            // Mostrar nuevo slide
            setTimeout(() => {
                animate(slides[index], { opacity: 1 }, { duration: 0.3 });

                // Actualizar indicadores
                indicators[currentIndex].classList.remove("bg-primary");
                indicators[currentIndex].classList.add("bg-gray-300");
                indicators[index].classList.remove("bg-gray-300");
                indicators[index].classList.add("bg-primary");

                currentIndex = index;
            }, 300);
        }

        function nextSlide() {
            const nextIndex = (currentIndex + 1) % totalSlides;
            showSlide(nextIndex);
        }

        // Auto-rotate cada 4 segundos
        autoRotate = setInterval(nextSlide, 4000);

        // Click en indicadores
        indicators.forEach((indicator, index) => {
            indicator.addEventListener("click", () => {
                showSlide(index);
                clearInterval(autoRotate);
                autoRotate = setInterval(nextSlide, 4000);
            });
        });
    });
</script>
